https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=aaa&cb=qq

qq({q:"aaa",p:false,s:["aaak7.com","aaa云主机","啊aaaaaaaa图片大全","aaaa","aaak7","aaa云","aaa短信轰炸机","aaak7美国发布站","aaaa94.com","aaa认证"]});

-------------------------------------------------------------------------------

正则：

3个方法：
search
match
replace

3个选项：
i	忽略大小写
m	多行
g	全部

量词：多少个
{n}	n个
aaa	=>	a{3}

+	若干-随便几个

转义：
\d	数字


replace(re, str||fn)

-------------------------------------------------------------------------------

方括号：
[]

1.任选一个

/a[abc]p/

aap	abp	acp		√
abbp				×
abcp				×

注意：不加量词，就是一个

---

ab+
abbbbbbb		√
abababab		×

(ab)+
abababab

注意：量词只管前面的一个东西

---

(ab)+
ababababab	√
ababababa	×

分组
注意：要么都得出来，要么都不出来

---

[a,b,c]		a、b、c或者,
[a|b|c]		a、b、c或者|

注意：[]里面不需要任何分隔符

2.范围

[a-z]
[0-9]

[a-z0-9]

---

[1-58]

[ab\-c]		a、b、c或者-

[23-58]		2,3,4,5,8


3.排除
[^abc]
[^0-9a-z]

-------------------------------------------------------------------------------

转义：
\d	[0-9]		digit		数字
\w	[a-zA-Z0-9_]	word		数字、字母、下划线
\s			space		空白字符――所有可能的空白字符

\D	[^0-9]				非数字
\W	^\w
\S	^\s

.	任意字符

---

/\\d/	=>	\d两个字

---

\b	单词边界――把单词隔开的东西

-------------------------------------------------------------------------------

修饰：^$

^	开头
$	结尾

-------------------------------------------------------------------------------

3种修饰符：
^
$
\b

-------------------------------------------------------------------------------

量词：
{n}		正好n个
{n,m}		n-m个
{n,}		最少n个，最多随便
{0,m}		最多m个

+	{1,}	随便多少个――得有
*	{0,}	随便多少个――可以没有		【不推荐-如非必须】
?	{0,1}	有或者没有(就算有，只有1个)

98765468
021-98765468
010-021-98765468	×

-------------------------------------------------------------------------------

座机号-正则：

写正则――分段写

021-			98765468
区号			座机

区号：前面0，3位、4位数字
号码：第一个不是0，7、8位

0[1-9]\d{1,2}\-		[1-9]\d{6,7}

(0[1-9]\d{1,2}\-)?	[1-9]\d{6,7}

-------------------------------------------------------------------------------

test――校验	bool

str.search
str.match
str.replace

re.test(str);

07543432347

-------------------------------------------------------------------------------

test――只要有一部分符合要求，算true

用test――一定要加上^$

-------------------------------------------------------------------------------

校验QQ号：
5-11位

[1-9]\d{4,10}

-------------------------------------------------------------------------------

手机：
头		身子
135		54876988

13
14
15
17
18

1[3-578]\d	\d{8}
1[3-578]\d{9}

-------------------------------------------------------------------------------

邮箱：

blue@126.com
1232131@qq.com
tr435_4562r@sina.com.cn
aaa.bbb@qq.com

头		@	网址		.com.cn

头：
6~18个字符，可使用字母、数字、下划线，需以字母开头

@

网址：
英文字母（不区分大小写）、数字、"-"（中横线）


头		@	网址		.erwere.cn
[a-z]\w{5,17}	@	[a-z0-9\-]+	(\.[a-z]{2,6}){1,2}

-------------------------------------------------------------------------------

年龄：18-100

18-19
20-99
100

-------------------------------------------------------------------------------

/^1[89]|[2-9]\d|100$/

/(^1[89])|([2-9]\d)|(100$)/

18、19开头
[2-9]\d
100结尾

(12+8)/2

-------------------------------------------------------------------------------

test――一定要加^$
用了|――一定加()

-------------------------------------------------------------------------------

addClass
removeClass

"aaa  bbb  box2 ccc  active     "

-------------------------------------------------------------------------------

垃圾回收――回收内存
	防止内存泄露

var arr=[12, 6, 5, 8];

-------------------------------------------------------------------------------

C语言

var arr=malloc(1024);

arr[0]xxxxx

...
free(arr);

内存泄露：

-------------------------------------------------------------------------------

垃圾回收

标准：生存周期

1.局部变量	非常短		直到函数执行结束为止
2.全局变量	非常长		直到页面关闭为止
3.闭包		不确定		直到里面的函数也消失
	如果里面的函数还在，父级所有的变量都不会释放
	如果里面的函数还在，整个作用域链上所有的变量都不会释放

function show()
{
	var a=xxx;
}

//执行前――a不存在
show();		//执行中――a出现了
//执行后――a没用了，可以回收

-------------------------------------------------------------------------------

闭包：如果里面还有函数用局部变量，局部变量暂时还会存在；直到函数消失为止
	里面的函数，延长了父函数的局部变量的生存周期

function show()
{
	var a=xxx;
	document.onclick=function ()
	{
		alert(a);
	};
}

show();
//结束：a没用了

...
...

document.onclick=null;
//a也就没了

-------------------------------------------------------------------------------

function show()
{
	var a=12;
	var b=5;

	document.onclick=function ()
	{
		alert(a);
	};
}

show();
//a不能释放
//b也会留着

-------------------------------------------------------------------------------

function aaa()
{
	var a=12;
	function bbb()
	{
		var b=5;
		function ccc()
		{
			var c=66;

			document.onclick=function xxx;
		}
	}
}

-------------------------------------------------------------------------------

作用域链――找东西，先找局部，再找父级，再父级的父级....，最后找全局

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

每一步：1、2

7层――?

1,2,3,5,8,13

x(1)=1
x(2)=2

x(n)=x(n-1)+x(n-2)

1层――1
2层――2
3层――3
	1,1,1
	1,2
	2,1
4层――5
	1,1,1,1
	1,1,2
	1,2,1
	2,1,1
	2,2
5层――8
	1,1,1,1,1
	1,1,1,2
	1,1,2,1
	1,2,1,1
	2,1,1,1
	1,2,2
	2,1,2
	2,2,1
6层――13
	1,1,1,1,1,1
	1,1,1,1,2
	1,1,1,2,1
	1,1,2,1,1
	1,2,1,1,1
	2,1,1,1,1
	1,1,2,2
	1,2,1,2
	2,1,1,2
	1,2,2,1
	2,1,2,1
	2,2,1,1
	2,2,2

-------------------------------------------------------------------------------

严格模式――绝对要加

严格模式：
1.没有var
2.防止把function定义放到if、for、while、switch...里面
3.彻底去掉with
4.?

-------------------------------------------------------------------------------

严格模式――也有作用域
1.函数里面
2.script标签

结论：绝对要在每个JS文件里都加上严格模式

严格模式必须写成"use strict"，大小写、空格、单词一个字不能差

-------------------------------------------------------------------------------












