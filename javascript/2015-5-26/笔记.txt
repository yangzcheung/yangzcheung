优化：
1.工具：F12、YSlow
2.小东西――
	减少请求――合并
	压缩
	延迟加载
	JS放在下面
3.执行性能
	不用了赶紧删
	尽量用系统的
	尽量正则
	尽量别用全局

	DOM操作慢――运动(看不见就停)
	图片慢――小点、别缩放、平铺切宽点
	属性慢

-------------------------------------------------------------------------------

面向对象：
只要用就行，不需要知道内部原理

写对象：

对象――组成

-------------------------------------------------------------------------------

1.属性
	属性==变量		存点东西

	变量			自由的
	属性			属于一个对象了

2.方法
	函数==方法

-------------------------------------------------------------------------------

第一个JS对象：

this：	发生事件的对象(?)
	当前的方法属于谁――所有者

事件==方法

-------------------------------------------------------------------------------

全局的函数出来window――对的		全局函数属于window
局部的函数出来window――bug		'use strict';

-------------------------------------------------------------------------------

严格模式：
1.with
2.没有var
3.各种结构声明function
4.修正this

-------------------------------------------------------------------------------

this：所有者(?)

出来window――bug		严格模式

-------------------------------------------------------------------------------

Array――存东西、排序...
Date――获取时间日期
RegExp――匹配、找

Object――什么都不会

-------------------------------------------------------------------------------

new仅仅只有两个功能：
1.替咱们：this=new Object		创建
2.替咱们：return this			返回

-------------------------------------------------------------------------------

函数里面的this，不是由定义决定的
********this的值，仅仅由调用决定********

-------------------------------------------------------------------------------

原型？

CSS

class	一次改变一堆			原型
行间	一次改变一个


.box {background:red;}

<div class="box" style="background:green;"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>

-------------------------------------------------------------------------------

arr.sum=xxx;			只有arr自己有
Array.prototype.sum=xxx;	所有arr都有

原型：可以给一类东西加

原型：不会每个对象都有一套――大家共用一套

-------------------------------------------------------------------------------

类：		Array	模子――本身没有功能，用来制造对象的
对象(实例)：	arr	产品――有功能，能用

var arr=new Array();

arr.push(5);	√
Array.push(12);	×

var oDate=new Date();

Date		类
oDate		对象

var p1=new createPerson();

createPerson	类
p1		对象


JS范围里面：
类==构造函数

-------------------------------------------------------------------------------

通用的方法：
1.构造函数――加属性
2.原型――加方法

JS本身根本不支持面向对象

-------------------------------------------------------------------------------

instanceof――更精确

-------------------------------------------------------------------------------

继承：父级有什么，子级就有什么

css的继承――父级加了个样式，子级也会有

Object――是JS里面所有对象的父级
	子类的对象，也就是父级的对象

-------------------------------------------------------------------------------

任何对象都是Object

-------------------------------------------------------------------------------

instanceof		子级+父级
constructor		子级
typeof――基本类型

-------------------------------------------------------------------------------

var json={a: 12, b: 5};

---

var json=new Object();

json.a=12;
json.b=5;

-------------------------------------------------------------------------------

面向对象――	广义：思想
		狭义(大部分人)：写法――new、prototype

-------------------------------------------------------------------------------

new
prototype

-------------------------------------------------------------------------------

在工作中：90%不用面向对象
	  面试中90%都会问面向对象

-------------------------------------------------------------------------------

用面向对象：
1.没辙――公司要求
2.装13――

-------------------------------------------------------------------------------

关于this――恶心、恶心

1.this优先级：

高	new	新new出来的object
	定时器	window
	事件	发生事件的对象
	方法	方法所属的对象
低	其他	window||undefined


CSS样式优先级：
*<tag<.box<#div1<行间

2.看this是什么――只看执行的一句话

3.只影响一层――每隔一层函数，this就会变了

结论、解决：包一层

-------------------------------------------------------------------------------

面向对象――选项卡

改写？

面向函数――函数+函数+函数+函数
面向对象――对象+对象+对象。。。

改写：
1.onload函数			构造函数
2.构造函数里面的函数拿出来――放到原型上，当方法

-------------------------------------------------------------------------------

另一个函数(不是父子级)，用我的变量：
1.全局		×
2.属性



funciton Person()
{
	this.name=xxx;
}

Person.prototype.showName=function ()
{
	alert(this.name);
};

-------------------------------------------------------------------------------

改写：
1.onload			变成构造函数
2.构造函数里面的函数		变成方法
3.变量(方法里也用)		变成属性

-------------------------------------------------------------------------------

面向对象：
1.库
2.游戏――面向对象(通过继承――提高维护性，容易添加内容)

-------------------------------------------------------------------------------

jQuery――从0开始，自己写一个：
zQuery：
1.巩固面向对象
2.复习jQuery、了解原理
3.复习课程

-------------------------------------------------------------------------------

选择器：

li#li1

-------------------------------------------------------------------------------

ZQuery()	$()

$(function (){})		函数――ready
$('#div1 xxx')			字符串――选择
$(this)				对象――包起来

$('#div1')

---

var oDiv=document.getElementById('div1');
$(oDiv)

-------------------------------------------------------------------------------

$('#div1').css('background', 'red');

$().css('width', '400px');		设置
$().css('width');			获取
$().css({width: '300px', height: xxx});	批量设置

$('div').css('width', '400px');

$('div').css({width: '300px', height: xxx});

-------------------------------------------------------------------------------

$(oDiv).css(xxxx)

-------------------------------------------------------------------------------

$('#div1')

---

var oDiv=document.getElementById('div1');
$(oDiv)

-------------------------------------------------------------------------------

$(xxx).click(function (){
	alert('abc');
});

-------------------------------------------------------------------------------

call――随意修改this

call、apply――一模一样
call(this对象, 参数, 参数, ...)
apply(this对象, [参数, 参数, ...])

-------------------------------------------------------------------------------

ZQuery
.click/dblclick/.....
.css()

-------------------------------------------------------------------------------

ZQuery、继承














