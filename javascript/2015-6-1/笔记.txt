1.简历 & 个人网站
2.选择器

input.box
input#txt1
input:eq()
input[value=aaa]

.box.box2
.box#div1
.box:eq(0)
.txt[value=aaa]

#div1 > li.box:eq(0)[value=txt], .box.box2#div1[value=aaa]:eq(0)

-------------------------------------------------------------------------------

$('<li>dasddasf</li>').appendTo('ul')
选择器不创建		创建
存起来

-------------------------------------------------------------------------------

var a=5;

a=12;

alert(a);	//12

赋值：
1.抛弃原有东西
2.装新的

-------------------------------------------------------------------------------

<div>
	dfasfasd			文本节点
	<span>asdfasdf</span>		元素节点
</div>

children	元素
childNodes	元素+文本		×

-------------------------------------------------------------------------------

$('<li></li>').appendTo('#ul1 .box ul ol')

$('li')
$('#ul1 > li')
$('<li></li>')

-------------------------------------------------------------------------------

$('div').remove();

-------------------------------------------------------------------------------

$('div').animate({width: 300, height: 400})

-------------------------------------------------------------------------------

$.ajax({
	url,
	data,
	type,
	success:	fn,
	error:		fn,
	timeout
});

-------------------------------------------------------------------------------

$.fn.名字=fn;

$.fn.extend({
	名字:	function (){}
});


$(xxx).click().hover().css();

---

$(xxx).click();
$(xxx).hover();
$(xxx).css();

-------------------------------------------------------------------------------

zQuery

-------------------------------------------------------------------------------

面向对象――继承
不难

继承――父级有的子级也有

父级所有的东西：
属性
方法

-------------------------------------------------------------------------------

继承：
1.继承父级的属性
2.继承父级的方法

父级有的东西，子级一定会有
子级有的东西，父级不一定

子级>=父级

-------------------------------------------------------------------------------

继承父级方法：
		影响父级	后来父级又加东西	new 父级
原型赋值	×		√			√
for in		√		×			√

继承：
new+call

constructor

-------------------------------------------------------------------------------

arr1.constructor==Array
arr2.constructor==Array

-------------------------------------------------------------------------------

继承：
1.	父级.call			继承属性
2.	子级.prototype=new 父级		继承方法
3.	子级.prototype.constructor	constructor乱了












