PHP――接收数据、处理
$_GET/$_POST
90%――数据库

框架――后台也有(成熟)

-------------------------------------------------------------------------------

HTML5+CSS3

1.移动端
2.离不了JS
3.新特新――可以不用

HTML5：
1.canvas
2.新标签
3.本地存储(就在用)
4.webSocket――通信(兼容)
5.webWorker――多线程
6.webGL――3D
7.webSQL――数据库(没人用)
8.video、audio
9.选择器

CSS：
1.transform――translate、scale、rotate、skew
2.font-face?
3.圆角
4.shadow
5.transition
6.animate
7.animation
8.渐变
9.rgba

-------------------------------------------------------------------------------

transform：

12小时		360度
1小时=30度

1	30
2	60
n	30*n

60分钟		360度
1分=6度

n	6*n

1点	1	30
1:30	1.5	45
2点	2	60

hour+min/60

-------------------------------------------------------------------------------

算法：解决问题的步骤

-------------------------------------------------------------------------------

排序算法：

冒泡
12,5,8,3,55,19,26,71,7
5,8,3,12,19,26,55,7,71		1轮
5,3,8,12,19,26,7,55,71		2轮
...

-------------------------------------------------------------------------------

4,3,2,1
3,2,1,4		1轮
2,1,3,4		2轮
1,2,3,4		3轮


1.每一轮：俩俩一比，小的前面大的后面
2.最多进行n-1轮

保证：
1.100%没问题		准确性
2.对于任何数据都得没问题

-------------------------------------------------------------------------------

算法：解决问题的步骤

-------------------------------------------------------------------------------

1.找中间的数――是(找到)
		不是(看看大小：比n大，往左找；比n小，往右找)
2.重复第1步

3,8		5
3,4,5,6,7,8

4,6		5
4,5,6

2,10		6
2,3,4,5,6,7,8,9,10

12,16		14
12,13,14,15,16

c=(s+e)/2

-------------------------------------------------------------------------------

		最优情况	最差情况		平均情况
线性查找	1		n			n/2
二分查找	1		log2(n)			log2(n)/2


		线性查找		二分查找
10		5			2		2.5倍
1000		500			5		100倍
1亿		5000万			14		357万倍
10万亿		5万亿			22		2272亿倍

-------------------------------------------------------------------------------

没有完美的算法――算法之间没有好坏之分

-------------------------------------------------------------------------------

数据结构

有什么样的数据结构，就有什么样的算法
数据结构决定了算法

-------------------------------------------------------------------------------

数据结构：如何组织数据

有序数组――二分搜索
无序数组――线性搜索

-------------------------------------------------------------------------------

数据结构――没有完美的数据结构
找最适合的

数据结构：
增
删
改
查

有序
无序

-------------------------------------------------------------------------------

某：
增	1月
删	2小时
改	1月
查	0.00000000000000001s

百度

某2：
增	1分
删	10年
改	2s
查	3s

银行

-------------------------------------------------------------------------------

	查找		添加
有序	瞬间		很慢
无序	很慢		瞬间

	查找		添加
有序	0.0000001s	5分钟
无序	3分钟		0.0000000003s
二叉树	0.3s		0.05s

-------------------------------------------------------------------------------

二叉树――每个元素最多2个子元素；左边所有的，比根小；右边所有的，比根大
树

HTML就是树――DOM树

二叉树――最常见的数据结构、最常用

-------------------------------------------------------------------------------

算法――流程

数据结构――

有序
无序
二叉树

-------------------------------------------------------------------------------

散列――“完美的”数据结构

数组？
arr[0]++;
arr[32124221]++;
*速度一样的

数组――哪一位速度都一样

-------------------------------------------------------------------------------

散列――大数组

var arr=[];

arr[13578489878]={xxx};		增
arr[13578489878]=null;		删
arr[13578489878].cash+=50;	改
alert(arr[13578489878].cash);	查

增	一瞬间
删	一瞬间
改	一瞬间
查	一瞬间

13578489878
19999999999
20000000000

200000000000K=195312500M=190734G=186T

200T
20万――1000万

-------------------------------------------------------------------------------

1000000000000000000
10000000000000000000K=9765625000000000M=9536743164062G=9313225746T=9094947P=8881F=8.6E(艾)

8.6E
2E

-------------------------------------------------------------------------------

散列――大数组
	“完美的”数据结构

“妥协版”散列

-------------------------------------------------------------------------------

超了――映射	%
	冲突	住隔壁

15%arr.length=5

-------------------------------------------------------------------------------

散列――性能
空间大――性能高
空间小――性能低

空间=>性能

用空间换时间

-------------------------------------------------------------------------------

常用：
堆栈	盘子	后进先出，先进后出
队列	排队	后进后出，先进先出

-------------------------------------------------------------------------------

堆栈
浏览器历史记录、函数

队列
下载队列、客服队列、CPU任务调度队列

-------------------------------------------------------------------------------

数据结构――极其重要

-------------------------------------------------------------------------------

数据结构

-------------------------------------------------------------------------------

面试：
笔试	20%
面试	80%

面试？
	工具、库

笔试：
1.语言基础：作用域、闭包、预解析、作用域链、xxx
2.HTML、CSS
3.兼容
4.性能、优化
5.面向对象：this、prototype
6.交互：ajax、jsonp
7.正则
8.DOM、事件
9.HTML5、CSS3


8.历史题	×

-------------------------------------------------------------------------------

学习建议(2-3年)：
1.HTML5+CSS3
2.后台：nodeJS、PHP
  数据库：MySQL
3.数据结构
4.产品设计

题目：
http://mianshiti.diandian.com/

-------------------------------------------------------------------------------

1, 判断字符串是否是这样组成的，第一个必须是字母，后面可以是字母、数字、下划线，总长度为5-20

/^[a-z]\w{4,19}$/i

2，截取字符串abcdefg的efg

.substring

3，判断一个字符串中出现次数最多的字符，统计这个次数

4，IE与FF脚本兼容性问题

1.绑定：addEventListener||attachEvent
	remove/detach
2.onmousewheel||DOMMouseScroll
	wheelDelta||detail
3.toElement||relatedTarget
4.ev||event
5.currentStyle||getComputedStyle
6.scrollTop
7.first、last
8.ready――DOMContentLoaded||onreadystatechange
9.srcElement||target
10.XMLHttpRequest||ActiveXObject(xxx)
11.preventDefault
12.setCapture
13.冒泡、捕获(true)

5，规避javascript多人开发函数重名问题

封闭空间
面向对象
命名空间
模块化――seaJS

6，javascript面向对象中继承实现

7，FF下面实现outerHTML

8，编写一个方法 求一个字符串的字节长度

9，编写一个方法 去掉一个数组的重复元素

10，写出3个使用this的典型应用

方法――当前对象
事件――
构造函数

12，如何显示/隐藏一个DOM元素？

13，JavaScript中如何检测一个变量是一个String类型？请写出函数实现

typeof

14，网页中实现一个计算当年还剩多少时间的倒数计时程序，要求网页上实时动态显示“××年还剩××天××时××分××秒”

15，补充代码，鼠标单击Button1后将Button1移动到Button2的后面
<div>
	<input type=”button” id =”button1″ value=”1″ onclick=”???”>
	<input type=”button” id =”button2″ value=”2″ />
</div>

16，JavaScript有哪几种数据类型

string/number/boolean/undefined/function/object

17，下面css标签在JavaScript中调用应如何拼写，border-left-color，-moz-viewport

boderLeftColor
MozViewport

19，如何控制alert中的换行

20，请实现，鼠标点击页面中的任意标签，alert该标签的名称．（注意兼容性）

事件委托

21，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如：

var url = “http://witmax.cn/index.php?key0=0&key1=1&key2=2″;

=>{key0: 0, key1: 1...}

22，ajax是什么? ajax的交互模型? 同步和异步的区别? 如何解决跨域问题?

ajax的交互模型：
1.创建
2.连接
3.发送
4.接收

23，什么是闭包？下面这个ul，如何点击每一列的时候alert其index?

24，请给出异步加载js方案，不少于两种

1.创建script
2.seajs加载
3.ajax加载

26，js中如何定义class,如何扩展prototype?

function Person()xxx

Person.prototype.xxx

27，如何添加html元素的事件,有几种方法.

1.行间
2.直接加	oDiv.onclick=
3.绑定
4.委托

28，documen.write和 innerHTML的区别

29，多浏览器检测通过什么？

1.userAgent
2.浏览器特性检测、浏览器特征检测
if(document.addEventListener)
{
	高级
}
else
{
	低级
}

30，js的基础对象有那些, window和document的常用的方法和属性列出来

Array、Date、RegExp、Number、Function、Object...

window.alert()
window.open()
window.close()
window.location
window.navigator
....

document.write()
document.getElementById()
document.createElement()
document.documentElement
document.body
document.title

31，前端开发的优化问题

32，如何控制网页在网络传输过程中的数据量

压缩
合并

33，Flash、Ajax各自的优缺点，在使用中如何取舍？













18，JavaScript中如何对一个对象进行深度clone
25，请设计一套方案，用于确保页面中JS加载完全。

-------------------------------------------------------------------------------

webQQ、nodeJS、面试收尾、运动











